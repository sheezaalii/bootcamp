using System;
using System.Collections.Generic;

namespace MyApp
{
    internal class Program
    {
        // Book class with attributes and methods
        class Book
        {
            public string Title { get; private set; }
            public string Author { get; private set; }
            public int BookID { get; private set; }

            private static int nextBookID = 1; // Static field to hold the next available BookID

            public Book(string title, string author)
            {
                this.Title = title;
                this.Author = author;
                this.BookID = nextBookID; // Assign the current nextBookID to the BookID
                nextBookID++; // Increment nextBookID for the next book
            }

            public void DisplayInfo()
            {
                Console.WriteLine($"\nTitle: {this.Title}");
                Console.WriteLine($"Author: {this.Author}");
                Console.WriteLine($"BookID: {this.BookID}");
            }
        }

        // Person class with attributes
        class Person
        {
            public string Name { get; private set; }
            public int Age { get; private set; }
            public int PersonID { get; private set; }

            public Person(string name, int age, int personID)
            {
                this.Name = name;
                this.Age = age;
                this.PersonID = personID;
            }
        }

        // Librarian class derived from Person class
        class Librarian : Person
        {
            public int EmployeeID { get; private set; }

            public Librarian(string name, int age, int personID, int employeeID)
                : base(name, age, personID)
            {
                this.EmployeeID = employeeID;
            }

            public void IssueBook(Book book, Person user)
            {
                Console.WriteLine($"\nLibrarian {this.Name} issued book '{book.Title}' to {user.Name}.");
            }

            public void ReturnBook(Book book, Person user)
            {
                Console.WriteLine($"\nLibrarian {this.Name} received book '{book.Title}' from {user.Name}.");
            }
        }

        // Library class with attributes and methods
        class Library
        {
            public string LibraryName { get; private set; }
            public int LibraryID { get; private set; }

            private List<Book> bookList = new List<Book>();
            private List<Book> issuedBooks = new List<Book>();
            public Librarian Librarian { get; private set; }

            public Library(string libraryName, int libraryID, Librarian librarian)
            {
                this.LibraryName = libraryName;
                this.LibraryID = libraryID;
                this.Librarian = librarian;
            }

            // AddBook method to add a book to the library
            public void AddBook(Book book)
            {
                bookList.Add(book);
                Console.WriteLine($"\nBook '{book.Title}' added to the library.");
            }

            // RemoveBook method to remove a book from the library by its ID
            public void RemoveBook(int bookID)
            {
                Book bookToRemove = bookList.Find(book => book.BookID == bookID);

                if (bookToRemove != null)
                {
                    bookList.Remove(bookToRemove);
                    Console.WriteLine($"\nBook with ID #{bookID} removed from the library.");
                }
                else
                {
                    Console.WriteLine($"\nBook with ID #{bookID} not found in the library.");
                }
            }

            // ViewBookList method to display all books in the library
            public void ViewBookList()
            {
                Console.WriteLine("\nBooks in Library:");
                foreach (var book in bookList)
                {
                    book.DisplayInfo();
                }
            }

            // SearchBook method to find a book by title
            public void SearchBook(string title)
            {
                Console.WriteLine($"\nSearching for book with title: {title}");
                foreach (var book in bookList)
                {
                    if (book.Title.Equals(title, StringComparison.OrdinalIgnoreCase))
                    {
                        book.DisplayInfo();
                        return;
                    }
                }
                Console.WriteLine($"Book with title '{title}' not found.");
            }

            // ListIssuedBooks method to display all issued books
            public void ListIssuedBooks()
            {
                Console.WriteLine("\nIssued Books:");
                foreach (var book in issuedBooks)
                {
                    book.DisplayInfo();
                }
            }

            // Issue a book
            public void IssueBook(Book book, Person user)
            {
                if (!issuedBooks.Contains(book))
                {
                    issuedBooks.Add(book);
                    Librarian.IssueBook(book, user);
                }
                else
                {
                    Console.WriteLine($"\nBook '{book.Title}' is already issued.");
                }
            }

            // Return a book
            public void ReturnBook(Book book, Person user)
            {
                if (issuedBooks.Contains(book))
                {
                    issuedBooks.Remove(book);
                    Librarian.ReturnBook(book, user);
                }
                else
                {
                    Console.WriteLine($"\nBook '{book.Title}' was not issued.");
                }
            }

            // Public method to get a book by its ID
            public Book GetBookByID(int bookID)
            {
                return bookList.Find(book => book.BookID == bookID);
            }

            // Public method to get an issued book by its ID
            public Book GetIssuedBookByID(int bookID)
            {
                return issuedBooks.Find(book => book.BookID == bookID);
            }
        }

        // Main method
        static void Main(string[] args)
        {
            // Create instances of Book class
            Book sciFiction = new Book("Interstellar", "Robert");
            Book comedy = new Book("Friends", "Sara");
            Book action = new Book("Sherlock", "John");

            // Create an instance of Librarian class
            Librarian librarian = new Librarian("Alice", 30, 1001, 5001);

            // Create an instance of Library class
            Library national = new Library("National Library", 1, librarian);

            // Add books to the library
            national.AddBook(sciFiction);
            national.AddBook(comedy);
            national.AddBook(action);

            // View books in the library
            national.ViewBookList();

            // Remove a book from the library
            national.RemoveBook(sciFiction.BookID);

            // View books in the library again
            national.ViewBookList();

            // Issue and return book check
            Person user = new Person("Bob", 25, 2001);
            national.IssueBook(comedy, user);
            national.IssueBook(action, user);
            national.ListIssuedBooks();
            national.ReturnBook(comedy, user);
            national.ListIssuedBooks();

            // Adding interaction mechanism
            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("\nLibrary Menu:");
                Console.WriteLine("1. Add Book");
                Console.WriteLine("2. Remove Book");
                Console.WriteLine("3. View Books");
                Console.WriteLine("4. Search Book");
                Console.WriteLine("5. List Issued Books");
                Console.WriteLine("6. Issue Book");
                Console.WriteLine("7. Return Book");
                Console.WriteLine("8. Exit");
                Console.Write("Enter your choice: ");
                int choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Console.Write("Enter book title: ");
                        string title = Console.ReadLine();
                        Console.Write("Enter book author: ");
                        string author = Console.ReadLine();
                        Book newBook = new Book(title, author);
                        national.AddBook(newBook);
                        break;
                    case 2:
                        Console.Write("Enter book ID to remove: ");
                        int bookID = int.Parse(Console.ReadLine());
                        national.RemoveBook(bookID);
                        break;
                    case 3:
                        national.ViewBookList();
                        break;
                    case 4:
                        Console.Write("Enter book title to search: ");
                        string searchTitle = Console.ReadLine();
                        national.SearchBook(searchTitle);
                        break;
                    case 5:
                        national.ListIssuedBooks();
                        break;
                    case 6:
                        Console.Write("Enter book ID to issue: ");
                        int issueBookID = int.Parse(Console.ReadLine());
                        Book bookToIssue = national.GetBookByID(issueBookID);
                        if (bookToIssue != null)
                        {
                            national.IssueBook(bookToIssue, user);
                        }
                        else
                        {
                            Console.WriteLine("Book not found.");
                        }
                        break;
                    case 7:
                        Console.Write("Enter book ID to return: ");
                        int returnBookID = int.Parse(Console.ReadLine());
                        Book bookToReturn = national.GetIssuedBookByID(returnBookID);
                        if (bookToReturn != null)
                        {
                            national.ReturnBook(bookToReturn, user);
                        }
                        else
                        {
                            Console.WriteLine("Book not found.");
                        }
                        break;
                    case 8:
                        exit = true;
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }
    }
}
